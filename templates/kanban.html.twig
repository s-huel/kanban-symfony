{% extends 'base.html.twig' %}

{% block title %}Kanban Board{% endblock %}

{% block body %}
    <nav class="navbar">
        <a href="/kanban" class="nav-link">Kanban Board</a>
        <a href="/activitylog" class="nav-link">Activity Log</a>
        <a href="/logout" class="nav-link logout">Logout</a>
    </nav>


    <div class="kanban-board">
        {% for lane in lanes %}
            <div class="kanban-lane" id="lane-{{ lane.id }}">
                <div class="lane-header">
                    <h2>{{ lane.title }}</h2>
                    <div class="lane-actions">
                        <button class="edit-btn" onclick="editLane({{ lane.id }})">‚úèÔ∏è Edit</button>
                        <button class="delete-btn" onclick="deleteLane({{ lane.id }})">üóëÔ∏è Delete</button>
                    </div>
                </div>

                <div class="lane-tasks">
                    {% for task in tasks %}
                        {% if task.lane.id == lane.id %}
                            <div class="kanban-task" id="task-{{ task.id }}" draggable="true">
                                <p>{{ task.title }}</p>
                                <button class="edit-btn" onclick="editTask({{ task.id }})">Edit</button>
                                <button class="delete-btn" onclick="deleteTask({{ task.id }})">Delete</button>
                                <button class="move-btn" onclick="moveTask({{ task.id }}, {{ lane.id }})">Move</button>
                            </div>
                        {% endif %}
                    {% endfor %}
                </div>

                <button onclick="addTask({{ lane.id }})">+ Add Task</button>
            </div>
        {% endfor %}
        <button class="add-lane-btn" onclick="addLane()">‚ûï Add Lane</button>
    </div>

    <script>
        async function editLane(laneId) {
            const newTitle = prompt("Enter new lane title:");
            if (!newTitle) return;

            const response = await fetch(`/api/lane/update/${laneId}`, {
                method: "PUT",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ title: newTitle }),
            });

            if (response.ok) {
                location.reload();
            } else {
                alert("Failed to update lane.");
            }
        }

        async function deleteLane(laneId) {
            if (!confirm("Are you sure you want to delete this lane?")) return;

            const response = await fetch(`/api/lane/delete/${laneId}`, { method: "DELETE" });

            if (response.ok) {
                location.reload();
            } else {
                alert("Failed to delete lane.");
            }
        }

        async function addLane() {
            const title = prompt("Enter lane title:");
            if (!title) return;

            const response = await fetch("/api/lane/create", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ title }),
            });

            if (response.ok) {
                location.reload();
            } else {
                alert("Failed to add lane.");
            }
        }

        function editTask(id) {
            let newTitle = prompt("Enter new task title:");
            if (newTitle) {
                fetch(`/api/task/update/${id}`, {
                    method: "PUT",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify({ title: newTitle })
                }).then(() => location.reload());
            }
        }

        function deleteTask(id) {
            if (confirm("Are you sure you want to delete this task?")) {
                fetch(`/api/task/delete/${id}`, { method: "DELETE" })
                    .then(() => location.reload());
            }
        }

        function addTask(laneId) {
            let title = prompt("Enter task title:");
            if (title) {
                fetch(`/api/task/create`, {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify({ title, lane_id: laneId })
                }).then(() => location.reload());
            }
        }

        function moveTask(id, currentLaneId) {
            let newLaneId = prompt("Enter new lane ID:");
            if (newLaneId && newLaneId !== currentLaneId) {
                fetch(`/api/task/update/${id}`, {
                    method: "PUT",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify({ lane_id: newLaneId })
                }).then(() => location.reload());
            }
        }

        document.addEventListener("DOMContentLoaded", function () {
            let tasks = document.querySelectorAll(".kanban-task");
            let lanes = document.querySelectorAll(".kanban-lane");

            tasks.forEach(task => {
                task.setAttribute("draggable", "true");
                task.addEventListener("dragstart", dragStart);
            });

            lanes.forEach(lane => {
                lane.addEventListener("dragover", dragOver);
                lane.addEventListener("drop", drop);
            });

            function dragStart(event) {
                event.dataTransfer.setData("taskId", event.target.id.split("-")[1]);
            }

            function dragOver(event) {
                event.preventDefault();
            }

            function drop(event) {
                event.preventDefault();
                let taskId = event.dataTransfer.getData("taskId");
                let newLaneId = event.target.closest(".kanban-lane").id.split("-")[1];

                fetch(`/api/task/update/${taskId}`, {
                    method: "PUT",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify({ lane_id: newLaneId })
                }).then(() => location.reload());
            }
        });
    </script>

    <style>
        .navbar {
            background-color: #2c3e50;
            padding: 15px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            border-radius: 5px;
        }

        .nav-link {
            color: white;
            text-decoration: none;
            padding: 10px 20px;
            font-weight: bold;
            transition: 0.3s;
        }

        .nav-link:hover {
            background-color: #34495e;
            border-radius: 5px;
        }

        .logout {
            background-color: #e74c3c;
            border-radius: 5px;
            padding: 10px 15px;
        }

        .logout:hover {
            background-color: #c0392b;
        }

        .kanban-board {
            display: flex;
            gap: 20px;
            padding: 20px;
            overflow-x: auto;
        }

        .kanban-lane {
            background: #f3f3f3;
            padding: 15px;
            border-radius: 8px;
            min-width: 250px;
            box-shadow: 2px 2px 10px rgba(0, 0, 0, 0.1);
        }

        .lane-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            background: #dcdcdc;
            padding: 10px;
            border-radius: 6px;
        }

        .lane-actions {
            display: flex;
            gap: 5px;
        }

        .lane-actions button {
            border: none;
            background: #3498db;
            color: white;
            padding: 5px 10px;
            border-radius: 4px;
            cursor: pointer;
        }

        .lane-actions button.delete-btn {
            background: #e74c3c;
        }

        .lane-actions button:hover {
            opacity: 0.8;
        }

        .kanban-task {
            background: white;
            padding: 10px;
            margin-top: 10px;
            border-radius: 5px;
            box-shadow: 1px 1px 5px rgba(0, 0, 0, 0.1);
        }

        .add-lane-btn {
            background: #2ecc71;
            color: white;
            padding: 10px 15px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-size: 16px;
            margin-top: 20px;
        }

        .add-lane-btn:hover {
            opacity: 0.8;
        }

        .kanban-task p {
            margin: 0;
            font-weight: bold;
        }

        .kanban-task button {
            margin-top: 5px;
            width: 100%;
            padding: 5px;
            border: none;
            cursor: pointer;
            font-size: 14px;
            border-radius: 3px;
        }

        .kanban-task button:hover {
            opacity: 0.8;
        }

        .edit-btn {
            background-color: #fbbc04;
            color: white;
        }

        .delete-btn {
            background-color: #ea4335;
            color: white;
        }

        .move-btn {
            background-color: #34a853;
            color: white;
        }

    </style>
{% endblock %}
