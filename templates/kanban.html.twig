{% extends 'base.html.twig' %}

{% block title %}Kanban Board{% endblock %}

{% block body %}
    <!-- Navbar with navigation links -->
    <nav class="navbar">
        <a href="/kanban" class="nav-link">Kanban Board</a>
        <a href="/activitylog" class="nav-link">Activity Log</a>
        <a href="/logout" class="nav-link logout">Logout</a>
    </nav>

    <!-- Main Kanban board container -->
    <div class="kanban-board">
        {# Loop through each lane to create columns on the board #}
        {% for lane in lanes %}
            <div class="kanban-lane" id="lane-{{ lane.id }}">
                <div class="lane-header">
                    <h2>{{ lane.title }}</h2>
                    <div class="lane-actions">
                        <!-- Edit and delete lane buttons -->
                        <button class="edit-btn" onclick="editLane({{ lane.id }})">‚úèÔ∏è Edit</button>
                        <button class="delete-btn" onclick="deleteLane({{ lane.id }})">üóëÔ∏è Delete</button>
                    </div>
                </div>

                <div class="lane-tasks">
                    {# Loop through all tasks #}
                    {% for task in tasks %}
                        {# Show only tasks that belong to the current lane #}
                        {% if task.lane.id == lane.id %}
                            <div class="kanban-task" id="task-{{ task.id }}" draggable="true">
                                <p>{{ task.title }}</p>

                                {# Priority label and controls if task has priority #}
                                {% if task.priority %}
                                    <span class="priority-label" style="background-color: {{ task.priority.color }};">
                                        {{ task.priority.title }}
                                        <button class="remove-priority" onclick="removePriority({{ task.id }})">‚úï</button>
                                        <button class="edit-priority" onclick="editPriorityLabel({{ task.id }})">‚úé</button>
                                    </span>
                                {% else %}
                                    <!-- Button to add priority if none set -->
                                    <button class="add-priority" onclick="addPriorityLabel({{ task.id }})">Add Priority</button>
                                {% endif %}

                                <!-- Edit and delete task buttons -->
                                <button class="edit-btn" onclick="editTask({{ task.id }})">Edit</button>
                                <button class="delete-btn" onclick="deleteTask({{ task.id }})">Delete</button>
                            </div>
                        {% endif %}
                    {% endfor %}
                </div>

                <!-- Button to add a new task inside this lane -->
                <button onclick="addTask({{ lane.id }})">+ Add Task</button>
            </div>
        {% endfor %}

        <!-- Button to add a new lane (column) to the board -->
        <button class="add-lane-btn" onclick="addLane()">‚ûï Add Lane</button>
    </div>

    <script>
        // JSON encoded priorities from backend for JS use
        const priorities = {{ priorities|json_encode|raw }};

        // Edit lane title with prompt and PUT request
        async function editLane(laneId) {
            const newTitle = prompt("Enter new lane title:");
            if (!newTitle) return;

            const response = await fetch(`/api/lane/update/${laneId}`, {
                method: "PUT",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ title: newTitle }),
            });

            if (response.ok) location.reload();
            else alert("Failed to update lane.");
        }

        // Confirm and delete lane via DELETE request
        async function deleteLane(laneId) {
            if (!confirm("Are you sure you want to delete this lane?")) return;

            const response = await fetch(`/api/lane/delete/${laneId}`, { method: "DELETE" });

            if (response.ok) location.reload();
            else alert("Failed to delete lane.");
        }

        // Add new lane by prompting title and POST request
        async function addLane() {
            const title = prompt("Enter lane title:");
            if (!title) return;

            const response = await fetch("/api/lane/create", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ title }),
            });

            if (response.ok) location.reload();
            else alert("Failed to add lane.");
        }

        // Edit task title by prompting and PUT request
        function editTask(id) {
            let newTitle = prompt("Enter new task title:");
            if (newTitle) {
                fetch(`/api/task/update/${id}`, {
                    method: "PUT",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify({ title: newTitle }),
                }).then(response => {
                    if (response.ok) {
                        location.reload();
                    } else {
                        alert("Failed to update task.");
                    }
                });
            }
        }

        // Confirm and delete task via DELETE request
        function deleteTask(id) {
            if (confirm("Are you sure you want to delete this task?")) {
                fetch(`/api/task/delete/${id}`, { method: "DELETE" })
                    .then(() => location.reload());
            }
        }

        // Add new task inside a lane with prompts and POST request
        async function addTask(laneId) {
            let title = prompt("Enter task title:");
            if (!title) return;

            let priorityId = prompt("Enter priority ID (1 = Low, 3 = Medium, 4 = High):");
            if (!priorityId) return;

            const response = await fetch("/api/task/create", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ title, lane_id: laneId, priority_id: priorityId }),
            });

            if (response.ok) location.reload();
            else alert("Failed to add task.");
        }

        // Remove priority label from task with confirmation
        function removePriority(taskId) {
            if (confirm("Remove priority label?")) {
                fetch(`/api/task/${taskId}/remove-priority`, { method: "DELETE" })
                    .then(() => location.reload());
            }
        }

        // Edit priority label by prompting new priority ID and PUT request
        function editPriorityLabel(taskId) {
            const newPriorityId = prompt("Enter new priority ID (1 = Low, 2 = Medium, 3 = High):");
            if (!newPriorityId) return;

            fetch(`/api/task/${taskId}/update-priority`, {
                method: "PUT",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ priority_id: newPriorityId }),
            }).then(() => location.reload());
        }

        // Add priority label by prompting priority ID and POST request
        function addPriorityLabel(taskId) {
            const priorityId = prompt("Enter priority ID (1 = Low, 2 = Medium, 3 = High):");
            if (!priorityId) return;

            fetch(`/api/task/${taskId}/add-priority`, {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ priority_id: priorityId }),
            }).then(() => location.reload());
        }

        // Drag & drop setup after DOM content loaded
        document.addEventListener('DOMContentLoaded', () => {
            const tasks = document.querySelectorAll('.kanban-task');
            const lanes = document.querySelectorAll('.kanban-lane');

            // Make tasks draggable
            tasks.forEach(task => {
                task.addEventListener('dragstart', e => {
                    e.dataTransfer.setData('text/plain', task.id);
                });
            });

            // Setup lanes to allow drops
            lanes.forEach(lane => {
                lane.addEventListener('dragover', e => {
                    e.preventDefault(); // needed to allow drop
                });

                // Handle dropping tasks into lanes and update backend
                lane.addEventListener('drop', async e => {
                    e.preventDefault();
                    const taskIdRaw = e.dataTransfer.getData('text/plain'); // e.g. "task-3"
                    const taskId = taskIdRaw.split('-')[1]; // extract "3"
                    const laneId = lane.id.split('-')[1];  // extract lane id

                    console.log('Dropping task:', taskId, 'to lane:', laneId);

                    // Update task's lane_id in backend
                    const response = await fetch(`/api/task/update/${taskId}`, {
                        method: 'PUT',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ lane_id: laneId }),
                    });

                    if (response.ok) {
                        console.log('Move successful');
                        location.reload();
                    } else {
                        const error = await response.json();
                        console.error('Move failed:', error);
                        alert('Failed to move task: ' + (error.error || 'Unknown error'));
                    }
                });

            });
        });

    </script>

    <!-- CSS Styles: Worst styling seen to the human eye -->
    <style>
        /* Navbar styling */
        .navbar {
            background-color: #2c3e50;
            padding: 15px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            border-radius: 5px;
        }

        .nav-link {
            color: white;
            text-decoration: none;
            padding: 10px 20px;
            font-weight: bold;
            transition: 0.3s;
        }

        .nav-link:hover {
            background-color: #34495e;
            border-radius: 5px;
        }

        .logout {
            background-color: #e74c3c;
            border-radius: 5px;
            padding: 10px 15px;
        }

        .logout:hover {
            background-color: #c0392b;
        }

        /* Kanban board styling */
        .kanban-board {
            display: flex;
            gap: 20px;
            padding: 20px;
            overflow-x: auto;
        }

        .kanban-lane {
            background: #f3f3f3;
            padding: 15px;
            border-radius: 8px;
            min-width: 250px;
            box-shadow: 2px 2px 10px rgba(0, 0, 0, 0.1);
        }

        /* Lane header styling */
        .lane-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            background: #dcdcdc;
            padding: 10px;
            border-radius: 6px;
        }

        .lane-actions {
            display: flex;
            gap: 5px;
        }

        /* Buttons inside lane actions */
        .lane-actions button {
            border: none;
            background: #3498db;
            color: white;
            padding: 5px 10px;
            border-radius: 4px;
            cursor: pointer;
        }

        .lane-actions button.delete-btn {
            background: #e74c3c;
        }

        /* Task card styling */
        .kanban-task {
            background: white;
            padding: 10px;
            margin-top: 10px;
            border-radius: 5px;
            box-shadow: 1px 1px 5px rgba(0, 0, 0, 0.1);
        }

        /* Add lane button styling */
        .add-lane-btn {
            background: #2ecc71;
            color: white;
            padding: 10px 15px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-size: 16px;
            margin-top: 20px;
        }

        .add-lane-btn:hover {
            opacity: 0.8;
        }

        .kanban-task p {
            margin: 0;
            font-weight: bold;
        }

        .kanban-task button {
            margin-top: 5px;
            width: 100%;
            padding: 5px;
            border: none;
            cursor: pointer;
            font-size: 14px;
            border-radius: 3px;
        }

        .kanban-task button:hover {
            opacity: 0.8;
        }

        /* Task action buttons */
        .edit-btn {
            background-color: #fbbc04;
            color: white;
        }

        .delete-btn {
            background-color: #ea4335;
            color: white;
        }

        .move-btn {
            background-color: #34a853;
            color: white;
        }

        .priority-label {
            color: #fff;
            padding: 1px 2px;
            border-radius: 12px;
            font-size: 0.8rem;
            margin-right: 8px;
            display: inline-flex;
            align-items: center;
        }

        .priority-label button {
            background: transparent;
            border: none;
            color: #fff;
            margin-left: 4px;
            cursor: pointer;
            font-weight: bold;
            font-size: 0.8rem;
        }
    </style>
{% endblock %}
